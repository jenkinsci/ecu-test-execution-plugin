/*
 * Copyright (c) 2021-2023 TraceTronic GmbH
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

plugins {
    id 'idea'
    id 'groovy'
    id 'jacoco'
    id 'codenarc'
    id 'maven-publish'
    id 'org.jenkins-ci.jpi' version "$jpiVersion"
    id "org.openapi.generator" version "$openapiVersion"
    id "com.github.spotbugs" version "$spotBugsPlugin"
    id 'org.cyclonedx.bom' version "$cyclonedxVersion"
    id 'com.github.jk1.dependency-license-report' version '1.17'
    id "org.owasp.dependencycheck" version "$depCheckVersion"
}

group = 'de.tracetronic.jenkins.plugins'
version = project.properties['version']
description = 'This plugin enables a platform-independent test execution. Due to the reduced complexity and ' +
        'communication via REST API, ' +
        'it provides an easy and reliable entry into continuous testing. It integrates ' +
        'ECU-TEST with Jenkins and allows report generation and its upload of ' +
        'automated test execution.'

jenkinsPlugin {
    jenkinsVersion = "${project.properties['jenkinsVersion']}"
    shortName = 'ecu-test-execution'
    group = "${group}"
    displayName = 'TraceTronic ECU-TEST-Execution Plugin'

    url = 'https://plugins.jenkins.io/ecu-test-execution/'
    gitHubUrl = 'https://github.com/jenkinsci/ecu-test-execution-plugin'

    generateTests = false
    configurePublishing = false
    fileExtension = 'hpi'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jenkins-ci.plugins:credentials:1087.v16065d268466'
    implementation 'org.jenkins-ci.plugins:script-security:1158.v7c1b_73a_69a_08'
    implementation 'org.jenkins-ci.plugins:structs:318.va_f3ccb_729b_71'
    implementation 'org.jenkins-ci.plugins.workflow:workflow-step-api:625.vd896b_f445a_f8'

    // ecu-test-java-rest-client
    api 'io.swagger:swagger-annotations:1.6.6'
    api 'com.google.code.gson:gson:2.9.1'
    api 'io.gsonfire:gson-fire:1.8.5'
    api 'com.squareup.okhttp3:okhttp:4.10.0'
    api 'com.squareup.okhttp3:logging-interceptor:4.10.0'
    api 'org.apache.commons:commons-lang3:3.12.0'
    api 'javax.annotation:javax.annotation-api:1.3.2'
    api 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    api 'org.slf4j:slf4j-api:2.0.11'

    // test
    testImplementation 'io.swagger:swagger-parser:1.0.61'
    testImplementation "com.github.spotbugs:spotbugs:${project.properties['spotBugsVersion']}"
    testImplementation 'org.cyclonedx:cyclonedx-gradle-plugin:1.4.0'
    testImplementation('com.google.inject:guice') {
        version {
            strictly '4.0'
        }
    }
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-basic-steps:941.vdfe1b_a_132c64'
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-cps:2689.v434009a_31b_f1'
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-cps:2689.v434009a_31b_f1:tests'
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-durable-task-step:1130.v8fd69d0b_8857'
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-job:1180.v04c4e75dce43'
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-step-api:625.vd896b_f445a_f8:tests'
    testImplementation "org.jenkins-ci.main:jenkins-war:${jenkinsVersion}"
    testImplementation('org.testcontainers:spock:1.17.6') {
        exclude group: 'org.spockframework', module: 'spock-core'
    }
    testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
    testImplementation 'org.spockframework:spock-junit4:2.3-groovy-3.0'
    testImplementation 'cglib:cglib-nodep:3.3.0'
    testImplementation 'org.objenesis:objenesis:3.3'
    testImplementation 'com.google.guava:guava:31.1-jre'
}

// remove at runtime, as it provides a not fully functional SAXParser which makes integration tests fail
configurations.testRuntimeOnly {
    exclude group: 'pull-parser', module: 'pull-parser'
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "ecu-test-execution"
            groupId = "${group}"
            version = "${version}"

            from components.java

            pom {
                packaging = "$jenkinsPlugin.fileExtension"
                name = "$jenkinsPlugin.displayName"
                description = "$project.description"
                url = 'https://plugins.jenkins.io/ecu-test-execution/'

                scm {
                    url =  'https://github.com/jenkinsci/ecu-test-execution-plugin'
                    connection = 'scm:git:git://github.com/jenkinsci/ecu-test-execution-plugin.git'
                    developerConnection = 'scm:git:git@github.com:jenkinsci/ecu-test-execution-plugin.git'
                    tag = "ecu-test-execution-$project.version"
                }

                developers {
                    developer {
                        id = 'TT-S3-D1'
                        name = 'Sebastian Dietze'
                        email = 'sebastian.dietze@tracetronic.de'
                    }
                    developer {
                        id = 'MartinGroscheTT'
                        name = 'Martin Grosche'
                        email = 'martin.grosche@tracetronic.de'
                    }
                    developer {
                        id = 'cwellmtt'
                        name = 'Christoph Wellm'
                        email = 'christoph.wellm@tracetronic.de'
                    }
                    developer {
                        id = 'ErikRehmTT'
                        name = 'Erik Rehm'
                        email = 'erik.rehm@tracetronic.de'
                    }
                }

                licenses {
                    license {
                        name = 'BSD-3-Clause'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                        distribution = 'repo'
                        comments = 'All source code is licensed under the BSD license.'
                    }
                }

                contributors {
                    contributor {
                        url = 'https://github.com/jenkinsci/ecu-test-execution-plugin/graphs/contributors'
                    }
                }
                issueManagement {
                    system = 'GitHub Issues'
                    url = 'https://github.com/jenkinsci/ecu-test-execution-plugin/issues'
                }
                ciManagement {
                    system = 'Jenkins'
                    url = 'https://ci.jenkins.io/job/plugins/job/ecu-test-execution-plugin/'
                }
            }
        }
    }
    repositories {
        maven {
            def path = project.version.toString().endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'
            name 'Jenkins'
            url "https://repo.jenkins-ci.org/${path}"
            credentials {
                username = project.findProperty('jenkinsUser')
                password = project.findProperty('jenkinsPwd')
            }
        }
        maven {
            name = "Artifacts"
            url = uri("file://${buildDir}/artifacts")
        }
    }
}

task cleanJenkins(type: Delete) {
    delete 'work'
}

task cleanApi(type: Delete) {
    delete 'generated'
}
clean.dependsOn cleanApi

tasks.named('server').configure {
    it.port.set('8082')
}

test {
    // exclude code, which can not be instrumented correctly
    jacoco {
        excludes = ["com/gargoylesoftware/**"]
    }
    // exclude tests which have own test tasks
    filter {
        excludeTestsMatching '*ContainerTest'
    }
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    // skip some process tests for ci
    systemProperties('spock.skip.sandbox': System.getProperty('spock.skip.sandbox', 'true'))
}

task containerTest(type: Test) {
    doFirst {
        def propFile = "src/test/resources/containerTest.properties"
        assert file(propFile).exists() : "No property file '$propFile' for container test found"

        def containerProps = new Properties()
        file(propFile).withInputStream {
            containerProps.load(it) }
        containerProps.each {
            environment it.key, it.value
        }
    }

    filter {
        includeTestsMatching('*ContainerTest')
    }
    useJUnitPlatform()
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

spotbugs {
    ignoreFailures = true
}

spotbugsMain {
    projectName = project.name
    release = version
    excludeFilter = file('config/spotbugs/spotbugs-exclude.xml')
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

codenarcMain {
    compilationClasspath = sourceSets.main.compileClasspath + sourceSets.main.output
    configFile = file('config/codenarc/rules.groovy')
    ignoreFailures = true
}

codenarcTest {
    compilationClasspath = codenarcMain.compilationClasspath + sourceSets.test.compileClasspath + sourceSets.test.output
    configFile = file('config/codenarc/rules-test.groovy')
    ignoreFailures = true
}

openApiGenerate {
    inputSpec = "$rootDir/specs/openapi.yml".toString()
    generatorName = "java"
    id = 'ecu-test-rest-java-client'
    version = '2021.4.0'
    groupId = 'de.tracetronic.cxs'
    outputDir = "$rootDir/generated".toString()
    packageName = "de.tracetronic.cxs.generated.et.client"
    apiPackage = 'de.tracetronic.cxs.generated.et.client.api'
    invokerPackage = 'de.tracetronic.cxs.generated.et.client'
    modelPackage = 'de.tracetronic.cxs.generated.et.client.model'
    library = 'okhttp-gson'
    generateModelTests = false
    generateApiTests = false
    configOptions = [
            licenseName: "MIT License",
            licenseUrl: "https://spdx.org/licenses/MIT.html",
            dateLibrary: "java${project.properties['javaVersion']}"
    ]
}

licenseReport {
    outputDir = "$projectDir/build/licenses"
    projects = [project] + project.subprojects
    configurations = ['runtimeClasspath']
    excludeGroups = []
    excludes = []
    excludeOwnGroup = false
    excludeBoms = false
    renderers = []
    importers = []
    allowedLicensesFile = new File("$projectDir/config/allowed_licenses.json")
}

cyclonedxBom {
    outputFormat = "json"
}

dependencyCheck {
    autoUpdate = false
    cveValidForHours = 24
    formats = ['HTML', 'JSON']
    failBuildOnCVSS = Float.parseFloat(project.properties['failBuildOnCVSS']) // only "HIGH" and "CRITICAL" vulnerabilities
    suppressionFile = 'config/vulnerabilities/suppressionFile.xml'
}

tasks.register('filterVulnerabilityJson', FilterTask) {
    minimumScore = Float.parseFloat(project.properties['failBuildOnCVSS'])
}

tasks.register('dependencyCheckEval') {
    it.dependsOn dependencyCheckAnalyze finalizedBy filterVulnerabilityJson
}

sourceSets {
    main {
        java {
            srcDir(files("${openApiGenerate.outputDir.get()}/src/main/java"))
        }
    }
}

tasks.compileJava.dependsOn tasks.openApiGenerate

idea {
    project {
        vcs = 'Git'
        jdkName = "${project.properties['javaVersion']}"
        languageLevel = "${project.properties['javaVersion']}"
    }
    module {
        jdkName = "${project.properties['javaVersion']}"
        downloadJavadoc = true
        downloadSources = true
    }
}

wrapper {
    gradleVersion = "$gradleVersion"
}
