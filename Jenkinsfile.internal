/*
=============
Prerequisites
=============
* Global environment variables set:
- EMAIL_RECIPIENTS
- TG_AUTH_KEY
- ET_VERSION
- TG_VERSION
* Jenkins plugins installed:
- https://plugins.jenkins.io/timestamper
- https://plugins.jenkins.io/gradle/
*/

@Library(['tracetronic-jenkins-lib', 'internal-cxs-jenkins-lib']) _

pipeline {
    options {
        buildDiscarder(logRotator(daysToKeepStr: '14'))
        timestamps()
    }

    agent {
        label 'master'
    }

    environment {
        authKey = credentials('TG_authkey_test_report_upload')
        pipeline_report_dir = "report2TG/build-$env.BUILD_NUMBER"
    }

    stages {
        stage('Run Parallel') {
            failFast false
            parallel {
                stage('System Tests') {
                    // The needed artifact is only built for main and pull requests -> skip this job otherwise
                    when { branch pattern: "PR-\\d+|main", comparator: "REGEXP"}
                    steps {
                        build job: '../systemTests', parameters: [string(name: 'artifactName', value: "${JOB_BASE_NAME}"), string(name: 'commitHash', value: "${GIT_COMMIT}")]
                    }
                }
                stage('Container Tests') {
                    agent {
                        label 'docker'
                    }
                    stages {
                        stage('Prepare Resources') {
                            steps {
                                copyArtifacts fingerprintArtifacts: true, projectName: '../prepareContainerTestData', selector: lastSuccessful()
                            }
                        }
                        stage('Run Container Tests') {
                            steps {
                                cmd '"./gradlew" clean containerTest -Dspock.skip.sandbox=false'
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            dir("${pipeline_report_dir}") {
                pipeline2ATX(true)
            }
            uploadJson2TG("${TESTGUIDE_url}", "${authKey}", "${TESTGUIDE_projectID}", "${pipeline_report_dir}/**", '')
        }
        unsuccessful {
            mail to: "${env.EMAIL_RECIPIENTS}",
                subject: "${JOB_NAME} - Build #${BUILD_NUMBER} - ${currentBuild.currentResult}",
                body: "Check console output at ${BUILD_URL} to view the results."
        }
    }
}
